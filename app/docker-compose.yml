name: ${COMPOSE_PROJECT_NAME:-cia-app}

services:
  db:
    image: mariadb:10.6
    environment:
      MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-SecurePassword123!}
      MARIADB_DATABASE: ${DB_NAME:-cia_database}
      MARIADB_USER: ${DB_USER:-root}
      MARIADB_PASSWORD: ${DB_PASSWORD:-SecurePassword123!}
    volumes:
      - db-data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL","mariadb-admin ping -h localhost -uroot -p${DB_ROOT_PASSWORD:-SecurePassword123!} || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network

  api:
    build:
      context: ./back_student
      dockerfile: Dockerfile
      cache_from:
        - node:18-alpine
    environment:
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-3306}
      DB_USER: ${DB_USER:-root}
      DB_PASSWORD: ${DB_PASSWORD:-SecurePassword123!}
      DB_NAME: ${DB_NAME:-cia_database}
      NODE_ENV: ${NODE_ENV:-production}
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-3000}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-me-in-production}
      PYTHON: ${PYTHON:-/usr/bin/python3}
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "${API_PORT:-3000}"
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.api.rule=Host(`api.${BASE_DOMAIN}`)
      - traefik.http.routers.api.entrypoints=websecure
      - traefik.http.routers.api.tls=true
      - traefik.http.routers.api.tls.certresolver=letsencrypt
      - traefik.http.services.api.loadbalancer.server.port=${API_PORT:-3000}
      - logging=promtail
    restart: unless-stopped
    networks:
      - app-network
      - traefik

  web:
    build:
      context: ./front_student
      dockerfile: Dockerfile
      cache_from:
        - node:18-alpine
        - nginx:1.27-alpine
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-/api}
    depends_on:
      - api
    # No direct port mapping; exposed via Traefik
    labels:
      - logging=promtail
      - traefik.docker.network=traefik
      - traefik.enable=true
      - traefik.http.routers.app.rule=Host(`app.${BASE_DOMAIN}`)
      - traefik.http.routers.app.entrypoints=websecure
      - traefik.http.routers.app.tls=true
      - traefik.http.routers.app.tls.certresolver=letsencrypt
      - traefik.http.services.app.loadbalancer.server.port=80
      # Route /api to the API service
      - traefik.http.routers.app-api.rule=Host(`app.${BASE_DOMAIN}`) && PathPrefix(`/api`)
      - traefik.http.routers.app-api.entrypoints=websecure
      - traefik.http.routers.app-api.tls=true
      - traefik.http.routers.app-api.tls.certresolver=letsencrypt
      - traefik.http.routers.app-api.service=api
      - traefik.http.middlewares.api-stripprefix.stripprefix.prefixes=/api
      - traefik.http.routers.app-api.middlewares=api-stripprefix
    restart: unless-stopped
    networks:
      - app-network
      - traefik

  promtail:
    image: grafana/promtail:2.9.0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./promtail.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    networks:
      - app-network
      - traefik

networks:
  app-network:
    driver: bridge
  traefik:
    external: true

volumes:
  db-data:
